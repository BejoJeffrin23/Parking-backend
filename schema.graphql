type Query {
  listUsersInGroup(groupName: String!): [CognitoGroupUser]
  listCognitoUsersByEmail(email: String!): [CognitoGroupUser]

  getMessages(filter: String): [Message]

  createCheckoutSession(
    user: CheckoutUserInput
    space: CheckoutSpaceInput
    other: CheckoutOtherInput
  ): String

  getOneImageSlider(id: ID!): ImageSlider

  getOneImageSliderBySlug(slug: String!, userId: String!): ImageSlider
  getAllImageSliders: [ImageSlider]

  getOneRoom(id: ID!): Room
  getOneRoomBySlug(slug: String!, userId: String!): Room
  getAllRooms: [Room]

  getOneForm(id: ID!): Form
  getOneFormBySlug(slug: String!, userId: String!): Form
  getAllForms: [Form]

  getOneFormSub(id: ID!): FormSub
  getAllFormSubsByFormId(formId: String!): [FormSub]
  getAllFormSubs: [FormSub]

  getAllImages: [ImageUpload]
  getDemo: [Book]
  getAllEmails: [ScrapedEmail]

  getAllTeams: [Menu]
  getOneTeam(id: ID!): Menu

  getAllIvdrips: [Menu]
  getOneIvdrip(id: ID!): Menu

  getAllTherapies: [Menu]
  getOneTherapie(id: ID!): Menu

  getAllServices: [Menu]
  getOneService(id: ID!): Menu

  getListing(id: ID!): Listing
  getPublishedListings: [Listing]
  getUserListings(userId: String!): [Listing]
  getPublishedListingsWithLatLng(lat: Float!, lng: Float!): [Listing]

  getBooking(id: ID!): Booking
  getBookingsWithListingId(listingId: ID!): [Booking]
  getDriverBookings(driverId: String!): [Booking]
  getOwnerBookings(ownerId: String!): [Booking]
}

type Mutation {
  createGroup(groupName: String!): String
  deleteGroup(groupName: String!): String
  adminAddUserToGroup(groupName: String!, username: String!): String
  adminRemoveUserFromGroup(groupName: String!, username: String!): String
  adminUpdateUserAttributes(username: String!, role: String!): String
  adminAddUserToGroupRole(
    groupName: String!
    username: String!
    role: String!
    email: String!
  ): String

  createOneImageSlider(
    userId: String!
    title: String!
    slug: String!
    images: [String]
  ): ImageSlider
  updateOneImageSlider(
    id: ID!
    title: String
    slug: String
    images: [String]
    published: Boolean
  ): ImageSlider
  deleteOneImageSlider(id: ID!): String

  createOneForm(
    userId: String!
    title: String!
    slug: String!
    formJSON: String!
  ): Form
  updateOneForm(
    id: ID!
    title: String
    slug: String
    formJSON: String
    published: Boolean
  ): Form
  deleteOneForm(id: ID!): String

  createOneFormSub(
    formId: String!
    formSlug: String!
    data: String!
    submitedBy: String!
  ): FormSub

  updateOneFormSub(
    id: ID!
    formId: String
    formSlug: String
    data: String
  ): FormSub

  deleteOneFormSub(id: ID!): String

  createOneRoom(
    userId: String!
    title: String!
    description: String!
    slug: String!
    price: Int!
    images: [RoomImagesInput]
    youtube: [String]
  ): Room
  updateOneRoom(
    id: ID!
    title: String
    description: String
    slug: String
    price: Int
    images: [RoomImagesInput]
    youtube: [String]
    published: Boolean
  ): Room
  deleteOneRoom(id: ID!): String

  uploadImage(title: String, imageUrl: String): ImageUpload
  createOneEmail(businessName: String, emails: [String]): ScrapedEmail
  createEmailTemplate(
    templateName: String
    body: String
    subject: String
  ): String
  sendTemplateEmail(
    userId: String!
    templateName: String!
    businessName: String!
    emails: [String]
  ): TemplateEmail
  sendEmail(
    userId: String!
    emails: [String]
    subject: String!
    message: String!
  ): Email
  createOneTeam(slug: String!, title: String!, description: String!): Menu
  updateOneTeam(id: ID!, slug: String, title: String, description: String): Menu
  deleteOneTeam(id: ID!): String

  createOneService(slug: String!, title: String!, description: String!): Menu
  updateOneService(
    id: ID!
    slug: String
    title: String
    description: String
  ): Menu
  deleteOneService(id: ID!): String

  createOneTherapie(slug: String!, title: String!, description: String!): Menu
  updateOneTherapie(
    id: ID!
    slug: String
    title: String
    description: String
  ): Menu
  deleteOneTherapie(id: ID!): String

  createOneIvdrip(slug: String!, title: String!, description: String!): Menu
  updateOneIvdrip(
    id: ID!
    slug: String
    title: String
    description: String
  ): Menu
  deleteOneIvdrip(id: ID!): String

  createListing(
    userId: String!
    locationDetails: LocationDataInput
    spaceDetails: SpaceDetailsDataInput
    spaceAvailable: SpaceAvailableDataInput
    pricingDetails: PricingDetailsDataInput
    location: LocationDataMarkerInput
    bookings: [ID]
  ): Listing
  updateListing(
    id: ID!
    published: Boolean
    locationDetails: LocationDataInput
    spaceDetails: SpaceDetailsDataInput
    spaceAvailable: SpaceAvailableDataInput
    pricingDetails: PricingDetailsDataInput
    location: LocationDataMarkerInput
    bookings: [ID]
  ): Listing
  deleteListing(id: ID!): String

  # createBooking(
  #   userId: String!
  #   username: String!
  #   listingId: ID!
  #   address: String!
  #   images: [String]
  #   startDate: String!
  #   startTime: String!
  #   endDate: String!
  #   endTime: String!
  #   payment: Float!
  #   cardDetails: CardDetailsInput!
  #   vehicle: VehicleInput!
  #   profileCategory: String!
  #   status: String!
  # ): Booking
  createBooking(
    driverId: String
    driverName: String
    driverEmail: String
    listingId: String
    ownerId: String
    ownerEmail: String
    address: String
    images: [String]
    startTime: String
    startDate: String
    endTime: String
    endDate: String
    status: String
    profileCategory: String
    vehicle: String
    payment: String
    paymentMethod: String
  ): Booking
  updateBooking(
    id: ID!
    driverId: String
    driverName: String
    listingId: String
    ownerId: String
    address: String
    images: [String]
    startTime: String
    startDate: String
    endTime: String
    endDate: String
    status: String
    profileCategory: String
    vehicle: String
    payment: String
    paymentMethod: String
  ): Booking
  deleteBooking(id: ID!): String

  createMessage(body: String!, handle: String!): Message!
}

type Subscription {
  uploadedImage: ImageUpload @aws_subscribe(mutations: ["uploadImage"])
  driverNewBooking(driverId: String): Booking
    @aws_subscribe(mutations: ["createBooking"])
  ownerNewBooking(ownerId: String): Booking
    @aws_subscribe(mutations: ["createBooking"])
  addMessage: Message @aws_subscribe(mutations: ["createMessage"])
}

type CognitoGroupUser {
  Username: String
  Attributes: [CognitoGroupUserAttributes]
  UserCreateDate: String
  UserLastModifiedDate: String
  Enabled: String
  UserStatus: String
}

type CognitoGroupUserAttributes {
  Name: String
  Value: String
}

type Message {
  _id: String!
  body: String!
  createdAt: String!
  handle: String!
}

input CheckoutUserInput {
  _id: String!
  email: String!
}

input CheckoutSpaceInput {
  _id: String!
  ownerId: String!
  image: String
  name: String!
  description: String!
  price: Int!
}
input CheckoutOtherInput {
  success_url: String!
  cancel_url: String!
}

type Email {
  _id: ID!
  userId: String!
  emails: [String]
  subject: String!
  message: String!
}

type TemplateEmail {
  _id: ID!
  userId: String!
  businessName: String!
  emails: [String]
  templateName: String!
}

type ScrapedEmail {
  _id: ID!
  businessName: String!
  emails: [String]
}

type ImageUpload {
  _id: ID!
  title: String
  imageUrl: String
}

type Menu {
  _id: ID!
  slug: String!
  title: String!
  description: String!
}

type Book {
  id: ID!
  title: String
}

type Room {
  _id: ID!
  userId: String!
  title: String!
  description: String!
  slug: String!
  price: Int!
  images: [RoomImages]
  youtube: [String]
  published: Boolean!
}

type RoomImages {
  original: String
  thumbnail: String
}

input RoomImagesInput {
  original: String
  thumbnail: String
}

type ImageSlider {
  _id: ID!
  userId: String!
  title: String!
  slug: String!
  images: [String]
  published: Boolean!
}

type Form {
  _id: ID!
  userId: String!
  title: String!
  formJSON: String!
  slug: String!
  published: Boolean!
}

type FormSub {
  _id: ID!
  formId: String!
  formSlug: String!
  data: String!
  submitedBy: String!
  submitedAt: String
}

type Listing {
  _id: ID!
  userId: String!
  published: Boolean!
  locationDetails: LocationData!
  spaceDetails: SpaceDetailsData!
  spaceAvailable: SpaceAvailableData!
  pricingDetails: PricingDetailsData!
  location: LocationDataMarker!
  bookings: [ID!]
}
type LocationDataMarker {
  type: String!
  coordinates: [Float]
}

input LocationDataMarkerInput {
  type: String
  coordinates: [Float]
}

type LocationData {
  listingType: String
  propertyType: String
  propertyName: String
  country: String
  address: String
  unitNum: String
  city: String
  state: String
  postalCode: String
  code: String
  phone: String
  marker: LocationDataMarker
  images: [String]
  features: [String]
}

input LocationDataInput {
  listingType: String
  propertyType: String
  propertyName: String
  country: String
  address: String
  unitNum: String
  city: String
  state: String
  postalCode: String
  code: String
  phone: String
  marker: LocationDataMarkerInput
  images: [String]
  features: [String]
}

type SpaceLabel {
  label: String!
  largestSize: String!
}

input SpaceLabelInput {
  label: String!
  largestSize: String!
}

type Height {
  value: Int!
  unit: String!
}

input HeightInput {
  value: Int
  unit: String!
}

type SpaceDetailsData {
  parkingSpaceType: String
  qtyOfSpaces: Int
  heightRestriction: Boolean
  height1: Height
  height2: Height
  sameSizeSpaces: Boolean
  largestSize: String
  motorcycle: Boolean
  compact: Boolean
  midsized: Boolean
  large: Boolean
  oversized: Boolean
  motorcycleSpaces: Int
  compactSpaces: Int
  midsizedSpaces: Int
  largeSpaces: Int
  oversizedSpaces: Int
  isLabelled: Boolean
  spaceLabels: [SpaceLabel]
  aboutSpace: String
  accessInstructions: String
}

input SpaceDetailsDataInput {
  parkingSpaceType: String
  qtyOfSpaces: String
  heightRestriction: Boolean
  height1: HeightInput
  height2: HeightInput
  sameSizeSpaces: Boolean
  largestSize: String
  motorcycle: Boolean
  compact: Boolean
  midsized: Boolean
  large: Boolean
  oversized: Boolean
  motorcycleSpaces: Int
  compactSpaces: Int
  midsizedSpaces: Int
  largeSpaces: Int
  oversizedSpaces: Int
  isLabelled: Boolean
  spaceLabels: [SpaceLabelInput]
  aboutSpace: String
  accessInstructions: String
}

type Day {
  isActive: Boolean!
  startTime: String
  endTime: String
}

input DayInput {
  isActive: Boolean!
  startTime: String
  endTime: String
}

type TimeDuration {
  value: Int
  unit: String!
}

input TimeDurationInput {
  value: Int
  unit: String
}

type SpaceAvailableData {
  monday: Day
  tuesday: Day
  wednesday: Day
  thursday: Day
  friday: Day
  saturday: Day
  sunday: Day
  scheduleType: String
  customTimeRange: [String]
  noticeTime: TimeDuration
  advanceBookingTime: TimeDuration
  minTime: TimeDuration
  maxTime: TimeDuration
  instantBooking: Boolean
}

input SpaceAvailableDataInput {
  monday: DayInput
  tuesday: DayInput
  wednesday: DayInput
  thursday: DayInput
  friday: DayInput
  saturday: DayInput
  sunday: DayInput
  scheduleType: String
  customTimeRange: [String]
  noticeTime: TimeDurationInput
  advanceBookingTime: TimeDurationInput
  minTime: TimeDurationInput
  maxTime: TimeDurationInput
  instantBooking: Boolean
}

type PricingRates {
  perHourRate: Float
  perDayRate: Float
  perWeekRate: Float
  perMonthRate: Float
}

input PricingRatesInput {
  perHourRate: Float
  perDayRate: Float
  perWeekRate: Float
  perMonthRate: Float
}

type PricingDetailsData {
  pricingType: String
  pricingRates: PricingRates
}

input PricingDetailsDataInput {
  pricingType: String
  pricingRates: PricingRatesInput
}

# type Booking {
#   _id: ID!
#   userId: String!
#   username: String!
#   listingId: ID!
#   address: String!
#   images: [String]
#   startDate: String!
#   startTime: String!
#   endDate: String!
#   endTime: String!
#   payment: Float!
#   cardDetails: CardDetails!
#   vehicle: Vehicle!
#   profileCategory: String!
#   status: String!
# }
type Booking {
  _id: ID!
  driverId: String
  driverName: String
  listingId: String
  ownerId: String
  address: String
  images: [String]
  startTime: String
  startDate: String
  endTime: String
  endDate: String
  status: String
  profileCategory: String
  vehicle: String
  payment: String
  paymentMethod: String
}

type CardDetails {
  number: String!
  expiry: String!
  nameOnCard: String!
  setDefault: Boolean!
}

input CardDetailsInput {
  number: String!
  expiry: String!
  nameOnCard: String!
  setDefault: Boolean!
}

type Vehicle {
  licensePlate: String!
  type: String!
  make: String!
  model: String!
  year: String!
  size: String!
  color: String
  image: String
}

input VehicleInput {
  licensePlate: String!
  type: String!
  make: String!
  model: String!
  year: String!
  size: String!
  color: String
  image: String
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
